{"version":3,"file":"itee-plugin-three.cjs.min.js","sources":["../sources/backend/loaders/DBFLoader.js","../sources/backend/converters/DbfToThree.js","../sources/backend/converters/JsonToThree.js","../sources/backend/converters/MtlToThree.js","../sources/backend/converters/Obj2ToThree.js","../sources/backend/loaders/SHPLoader.js","../sources/backend/converters/ShpToThree.js","../sources/backend/converters/ThreeToMongoDB.js","../sources/backend/types/Color.js","../sources/backend/MongoDBThreePlugin.js"],"sourcesContent":["/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * From:\r\n * https://www.clicketyclick.dk/databases/xbase/format/db2_dbf.html#DBII_DBF_STRUCT\r\n * http://web.archive.org/web/20150323061445/http://ulisse.elettra.trieste.it/services/doc/dbase/DBFstruct.htm\r\n * http://www.dbase.com/Knowledgebase/INT/db7_file_fmt.htm\r\n *\r\n * @class Todo...\r\n * @classdesc Todo...\r\n * @example Todo...\r\n *\r\n */\r\n\r\nimport {\r\n    DefaultLogger,\r\n    Endianness,\r\n    TBinaryReader\r\n} from 'itee-client'\r\nimport {\r\n    DefaultLoadingManager,\r\n    FileLoader\r\n} from 'three-full'\r\n\r\n/**\r\n *\r\n * @type {Object}\r\n */\r\nconst DBFVersion = Object.freeze( {\r\n    FoxPro:               0x30,\r\n    FoxPro_Autoincrement: 0x31,\r\n\r\n    dBASE_II:   0x02,\r\n    FoxPro_Var: 0x32,\r\n\r\n    dBASE_III_plus:          0x03,\r\n    dBASE_III_plus_memo:     0x83,\r\n    dBASE_IV_SQL_table:      0x43,\r\n    dBASE_IV_SQL_system:     0x63,\r\n    dBASE_IV_memo:           0x8B,\r\n    dBASE_IV_memo_SQL_table: 0xCB,\r\n    FoxBase:                 0xFB,\r\n\r\n    dBase_v_7: 4,\r\n\r\n    FoxPro_2_x:    0xF5,\r\n    HiPerSix_memo: 0xE5\r\n} )\r\n\r\n/**\r\n *\r\n * @type {Object}\r\n */\r\nconst DataType = Object.freeze( {\r\n    Binary:        'B',\r\n    Character:     'C',\r\n    Date:          'D',\r\n    Numeric:       'N',\r\n    Logical:       'L',\r\n    Memo:          'M',\r\n    Timestamp:     '@',\r\n    Long:          'I',\r\n    Autoincrement: '+',\r\n    Float:         'F',\r\n    Double:        'O',\r\n    OLE:           'G'\r\n} )\r\n\r\n/**\r\n *\r\n * @param manager\r\n * @param logger\r\n * @constructor\r\n */\r\nfunction DBFLoader ( manager = DefaultLoadingManager, logger = DefaultLogger ) {\r\n\r\n    this.manager = manager\r\n    this.logger  = logger\r\n    this.reader  = new TBinaryReader()\r\n\r\n}\r\n\r\nObject.assign( DBFLoader, {\r\n\r\n    /**\r\n     *\r\n     */\r\n    Terminator: 0x0D,\r\n\r\n    /**\r\n     *\r\n     */\r\n    DeletedRecord: 0x1A,\r\n\r\n    /**\r\n     *\r\n     */\r\n    YearOffset: 1900\r\n\r\n} )\r\n\r\nObject.assign( DBFLoader.prototype, {\r\n\r\n    /**\r\n     *\r\n     * @param url\r\n     * @param onLoad\r\n     * @param onProgress\r\n     * @param onError\r\n     */\r\n    load ( url, onLoad, onProgress, onError ) {\r\n\r\n        const scope = this\r\n\r\n        const loader = new FileLoader( scope.manager )\r\n        loader.setResponseType( 'arraybuffer' )\r\n        loader.load( url, arrayBuffer => {\r\n\r\n            onLoad( scope.parse( arrayBuffer ) )\r\n\r\n        }, onProgress, onError )\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param arrayBuffer\r\n     * @return {*}\r\n     */\r\n    parse ( arrayBuffer ) {\r\n\r\n        this.reader\r\n            .setEndianess( Endianness.Big )\r\n            .setBuffer( arrayBuffer )\r\n\r\n        const version = this.reader.getInt8()\r\n        if ( !this._isValidVersion( version ) ) {\r\n            this.logger.error( `DBFLoader: Invalid version number: ${version}` )\r\n            return null\r\n        }\r\n\r\n        const header = this._parseHeader( version )\r\n        const datas  = this._parseDatas( version, header )\r\n\r\n        return {\r\n            header,\r\n            datas\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param version\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    _isValidVersion ( version ) {\r\n\r\n        const availablesVersionValues = Object.values( DBFVersion )\r\n        return ( availablesVersionValues.includes( version ) )\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param version\r\n     * @return {{}}\r\n     * @private\r\n     */\r\n    _parseHeader ( version ) {\r\n\r\n        let header = {}\r\n\r\n        switch ( version ) {\r\n\r\n            case DBFVersion.FoxPro:\r\n            case DBFVersion.FoxPro_Autoincrement:\r\n            case DBFVersion.FoxPro_Var:\r\n            case DBFVersion.dBASE_II:\r\n                header = this._parseHeaderV2()\r\n                break\r\n\r\n            case DBFVersion.dBASE_III_plus:\r\n            case DBFVersion.dBASE_III_plus_memo:\r\n            //                header = this._parseHeaderV2_5()\r\n            //                break;\r\n\r\n            case DBFVersion.dBASE_IV_memo:\r\n            case DBFVersion.dBASE_IV_memo_SQL_table:\r\n            case DBFVersion.dBASE_IV_SQL_system:\r\n            case DBFVersion.dBASE_IV_SQL_table:\r\n                header = this._parseHeaderV3()\r\n                break\r\n\r\n            case DBFVersion.dBase_v_7:\r\n            case DBFVersion.FoxPro_2_x:\r\n            case DBFVersion.HiPerSix_memo:\r\n                header = this._parseHeaderV4()\r\n                break\r\n\r\n            default:\r\n                throw new RangeError( `Invalid version parameter: ${version}`, 'DBFLoader' )\r\n                break\r\n\r\n        }\r\n\r\n        // Check terminator\r\n        if ( this.reader.getUint8() !== DBFLoader.Terminator ) {\r\n            this.logger.error( 'DBFLoader: Invalid terminator after field descriptors !!!' )\r\n        }\r\n\r\n        return header\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @return {{numberOfRecords, year: *, month: (*|number), day: (*|number), lengthOfEachRecords, fields: Array}}\r\n     * @private\r\n     */\r\n    _parseHeaderV2 () {\r\n\r\n        const numberOfRecords     = this.reader.getInt16()\r\n        const year                = this.reader.getInt8() + DBFLoader.YearOffset\r\n        const month               = this.reader.getInt8()\r\n        const day                 = this.reader.getInt8()\r\n        const lengthOfEachRecords = this.reader.getInt16()\r\n\r\n        // Field descriptor array\r\n        let fields        = []\r\n        let name          = undefined\r\n        let type          = undefined\r\n        let length        = undefined\r\n        let memoryAddress = undefined\r\n        let decimalCount  = undefined\r\n        for ( let fieldIndex = 0 ; fieldIndex < numberOfRecords ; fieldIndex++ ) {\r\n\r\n            name          = this.reader.getString( 11 )\r\n            type          = this.reader.getChar()\r\n            length        = this.reader.getUint8()\r\n            memoryAddress = this.reader.getInt16()\r\n            decimalCount  = this.reader.getInt8()\r\n\r\n            fields.push( {\r\n                name,\r\n                type,\r\n                length,\r\n                memoryAddress,\r\n                decimalCount\r\n            } )\r\n\r\n        }\r\n\r\n        return {\r\n            numberOfRecords,\r\n            year,\r\n            month,\r\n            day,\r\n            lengthOfEachRecords,\r\n            fields\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @return {{year: *, month: (*|number), day: (*|number), numberOfRecords, numberOfByteInHeader, numberOfByteInRecord, fields: Array}}\r\n     * @private\r\n     */\r\n    _parseHeaderV2_5 () {\r\n\r\n        const year  = this.reader.getInt8() + DBFLoader.YearOffset\r\n        const month = this.reader.getInt8()\r\n        const day   = this.reader.getInt8()\r\n\r\n        this.reader.setEndianess( Endianness.Little )\r\n        const numberOfRecords      = this.reader.getInt32()\r\n        const numberOfByteInHeader = this.reader.getInt16()\r\n        const numberOfByteInRecord = this.reader.getInt16()\r\n        this.reader.setEndianess( Endianness.Big )\r\n        this.reader.skipOffsetOf( 3 + 13 + 4 ) // Reserved\r\n\r\n        // Field descriptor array\r\n        let fields        = []\r\n        let name          = undefined\r\n        let type          = undefined\r\n        let length        = undefined\r\n        let memoryAddress = undefined\r\n        let decimalCount  = undefined\r\n        let workAreaId    = undefined\r\n        let MDXFlag       = undefined\r\n        for ( let fieldIndex = 0 ; fieldIndex < numberOfRecords ; fieldIndex++ ) {\r\n\r\n            name          = this.reader.getString( 11 )\r\n            type          = this.reader.getChar()\r\n            memoryAddress = this.reader.getInt32()\r\n            length        = this.reader.getUint8()\r\n            decimalCount  = this.reader.getUint8()\r\n            this.reader.skipOffsetOf( 2 ) // Reserved\r\n            workAreaId = this.reader.getInt8()\r\n            this.reader.skipOffsetOf( 2 ) // Reserved\r\n            MDXFlag = this.reader.getInt8()\r\n            this.reader.skipOffsetOf( 1 ) // Reserved\r\n\r\n            fields.push( {\r\n                name,\r\n                type,\r\n                length,\r\n                memoryAddress,\r\n                decimalCount,\r\n                workAreaId,\r\n                MDXFlag\r\n            } )\r\n\r\n        }\r\n\r\n        return {\r\n            year,\r\n            month,\r\n            day,\r\n            numberOfRecords,\r\n            numberOfByteInHeader,\r\n            numberOfByteInRecord,\r\n            fields\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @return {{year: *, month: (*|number), day: (*|number), numberOfRecords, numberOfByteInHeader, numberOfByteInRecord, incompleteTransactionFlag: (*|number), encryptionFlag: (*|number), MDXFlag:\r\n     *     (*|number), languageDriverId: (*|number), fields: Array}}\r\n     * @private\r\n     */\r\n    _parseHeaderV3 () {\r\n\r\n        const year  = this.reader.getInt8() + DBFLoader.YearOffset\r\n        const month = this.reader.getInt8()\r\n        const day   = this.reader.getInt8()\r\n        this.reader.setEndianess( Endianness.Little )\r\n        const numberOfRecords      = this.reader.getInt32()\r\n        const numberOfByteInHeader = this.reader.getInt16()\r\n        const numberOfByteInRecord = this.reader.getInt16()\r\n        this.reader.setEndianess( Endianness.Big )\r\n        this.reader.skipOffsetOf( 2 ) // Reserved\r\n        const incompleteTransactionFlag = this.reader.getInt8()\r\n        const encryptionFlag            = this.reader.getInt8()\r\n        this.reader.skipOffsetOf( 12 ) // Reserved multi-users\r\n        const MDXFlag          = this.reader.getInt8()\r\n        const languageDriverId = this.reader.getInt8()\r\n        this.reader.skipOffsetOf( 2 ) // Reserved\r\n\r\n        // Field descriptor array\r\n        let fields       = []\r\n        let name         = undefined\r\n        let type         = undefined\r\n        let length       = undefined\r\n        let decimalCount = undefined\r\n        let workAreaId   = undefined\r\n        let MDXFieldFlag = undefined\r\n        while ( this.reader.getOffset() < numberOfByteInHeader - 1 ) {\r\n            //                for ( let fieldIndex = 0 ; fieldIndex < numberOfRecords ; fieldIndex++ ) {\r\n\r\n            name = this.reader.getString( 11 )\r\n            type = this.reader.getChar()\r\n            this.reader.skipOffsetOf( 4 ) // Reserved\r\n            length       = this.reader.getUint8()\r\n            decimalCount = this.reader.getUint8()\r\n            this.reader.skipOffsetOf( 2 ) // Reserved\r\n            workAreaId = this.reader.getInt8()\r\n            this.reader.skipOffsetOf( 10 ) // Reserved\r\n            MDXFieldFlag = this.reader.getInt8()\r\n\r\n            fields.push( {\r\n                name,\r\n                type,\r\n                length,\r\n                decimalCount,\r\n                workAreaId,\r\n                MDXFieldFlag\r\n            } )\r\n\r\n        }\r\n\r\n        return {\r\n            year,\r\n            month,\r\n            day,\r\n            numberOfRecords,\r\n            numberOfByteInHeader,\r\n            numberOfByteInRecord,\r\n            incompleteTransactionFlag,\r\n            encryptionFlag,\r\n            MDXFlag,\r\n            languageDriverId,\r\n            fields\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @return {{year: *, month: (*|number), day: (*|number), numberOfRecords, numberOfByteInHeader, numberOfByteInRecord, incompleteTransactionFlag: (*|number), encryptionFlag: (*|number), MDXFlag:\r\n     *     (*|number), languageDriverId: (*|number), languageDriverName, fields: Array}}\r\n     * @private\r\n     */\r\n    _parseHeaderV4 () {\r\n\r\n        const year  = this.reader.getInt8() + DBFLoader.YearOffset\r\n        const month = this.reader.getInt8()\r\n        const day   = this.reader.getInt8()\r\n        this.reader.setEndianess( Endianness.Little )\r\n        const numberOfRecords      = this.reader.getInt32()\r\n        const numberOfByteInHeader = this.reader.getInt16()\r\n        const numberOfByteInRecord = this.reader.getInt16()\r\n        this.reader.setEndianess( Endianness.Big )\r\n        this.reader.skipOffsetOf( 2 ) // Reserved\r\n        const incompleteTransactionFlag = this.reader.getInt8()\r\n        const encryptionFlag            = this.reader.getInt8()\r\n        this.reader.skipOffsetOf( 12 ) // Reserved multi-users\r\n        const MDXFlag          = this.reader.getInt8()\r\n        const languageDriverId = this.reader.getInt8()\r\n        this.reader.skipOffsetOf( 2 ) // Reserved\r\n        const languageDriverName = this.reader.getString( 32 )\r\n        this.reader.skipOffsetOf( 4 ) // Reserved\r\n\r\n        // Field descriptor array\r\n        let fields                 = []\r\n        let name                   = undefined\r\n        let type                   = undefined\r\n        let length                 = undefined\r\n        let decimalCount           = undefined\r\n        let MDXFieldFlag           = undefined\r\n        let nextAutoincrementValue = undefined\r\n        for ( let fieldIndex = 0 ; fieldIndex < numberOfRecords ; fieldIndex++ ) {\r\n\r\n            name         = this.reader.getString( 32 )\r\n            type         = this.reader.getChar()\r\n            length       = this.reader.getUint8()\r\n            decimalCount = this.reader.getUint8()\r\n            this.reader.skipOffsetOf( 2 ) // Reserved\r\n            MDXFieldFlag = this.reader.getInt8()\r\n            this.reader.skipOffsetOf( 2 ) // Reserved\r\n            nextAutoincrementValue = this.reader.getInt32()\r\n            this.reader.skipOffsetOf( 4 ) // Reserved\r\n\r\n            fields.push( {\r\n                name,\r\n                type,\r\n                length,\r\n                decimalCount,\r\n                MDXFieldFlag,\r\n                nextAutoincrementValue\r\n            } )\r\n\r\n        }\r\n\r\n        return {\r\n            year,\r\n            month,\r\n            day,\r\n            numberOfRecords,\r\n            numberOfByteInHeader,\r\n            numberOfByteInRecord,\r\n            incompleteTransactionFlag,\r\n            encryptionFlag,\r\n            MDXFlag,\r\n            languageDriverId,\r\n            languageDriverName,\r\n            fields\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param version\r\n     * @param header\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    _parseDatas ( version, header ) {\r\n\r\n        const numberOfRecords = header.numberOfRecords\r\n        const fields          = header.fields\r\n\r\n        let properties = undefined\r\n        if ( version === DBFVersion.dBase_v_7 ) {\r\n            properties = this._parseFieldProperties()\r\n        }\r\n\r\n        let records = []\r\n        let record  = undefined\r\n        let field   = undefined\r\n        for ( let recordIndex = 0 ; recordIndex < numberOfRecords ; recordIndex++ ) {\r\n\r\n            record              = {}\r\n            record[ 'deleted' ] = ( this.reader.getUInt8() === DBFLoader.DeletedRecord )\r\n\r\n            for ( let fieldIndex = 0, numberOfFields = fields.length ; fieldIndex < numberOfFields ; fieldIndex++ ) {\r\n\r\n                field = fields[ fieldIndex ]\r\n\r\n                switch ( field.type ) {\r\n\r\n                    case DataType.Binary:\r\n                        const binaryString   = this.reader.getString( field.length )\r\n                        record[ field.name ] = parseInt( binaryString )\r\n                        break\r\n\r\n                    case DataType.Numeric:\r\n                        const numericString  = this.reader.getString( field.length )\r\n                        record[ field.name ] = parseInt( numericString )\r\n                        break\r\n\r\n                    case DataType.Character:\r\n                        record[ field.name ] = this.reader.getString( field.length )\r\n                        break\r\n\r\n                    case DataType.Date:\r\n                        // YYYYMMDD\r\n                        record[ field.name ] = this.reader.getString( field.length )\r\n                        break\r\n\r\n                    case DataType.Logical:\r\n                        const logical = this.reader.getChar().toLowerCase()\r\n                        if ( logical === 't' || logical === 'y' ) {\r\n                            record[ field.name ] = true\r\n                        } else if ( logical === 'f' || logical === 'n' ) {\r\n                            record[ field.name ] = false\r\n                        } else {\r\n                            record[ field.name ] = null\r\n                        }\r\n                        break\r\n\r\n                    case DataType.Memo:\r\n                        record[ field.name ] = this.reader.getString( field.length )\r\n                        break\r\n\r\n                    case DataType.Timestamp:\r\n                        // 8 bytes - two longs, first for date, second for time.\r\n                        // The date is the number of days since  01/01/4713 BC.\r\n                        // Time is hours * 3600000L + minutes * 60000L + Seconds * 1000L\r\n\r\n                        break\r\n\r\n                    case DataType.Long:\r\n                        // 4 bytes. Leftmost bit used to indicate sign, 0 negative.\r\n                        record[ field.name ] = this.reader.getInt32()\r\n                        break\r\n\r\n                    case DataType.Autoincrement:\r\n                        // Same as a Long\r\n                        record[ field.name ] = this.reader.getInt32()\r\n                        break\r\n\r\n                    case DataType.Float:\r\n                        const floatString    = this.reader.getString( field.length )\r\n                        record[ field.name ] = parseInt( floatString )\r\n                        break\r\n\r\n                    case DataType.Double:\r\n                        record[ field.name ] = this.reader.getDouble()\r\n                        break\r\n\r\n                    case DataType.OLE:\r\n                        record[ field.name ] = this.reader.getString( field.length )\r\n                        break\r\n\r\n                    default:\r\n                        throw new RangeError( `Invalid data type parameter: ${field.type}`, '_parseDatas' )\r\n                        break\r\n\r\n                }\r\n\r\n            }\r\n\r\n            records.push( record )\r\n\r\n        }\r\n\r\n        return records\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @return {{numberOfStandardProperties, startOfStandardPropertiesDescriptor, numberOfCustomProperties, startOfCustomPropertiesDescriptor, numberOfReferentialIntegrityProperties,\r\n     *     startOfReferentialIntegrityDescriptor, startOfData, sizeOfPropertiesStructure, standardProperties: Array, customProperties: Array, referentialIntegrityProperties: Array}}\r\n     * @private\r\n     */\r\n    _parseFieldProperties () {\r\n\r\n        const numberOfStandardProperties             = this.reader.getInt16()\r\n        const startOfStandardPropertiesDescriptor    = this.reader.getInt16()\r\n        const numberOfCustomProperties               = this.reader.getInt16()\r\n        const startOfCustomPropertiesDescriptor      = this.reader.getInt16()\r\n        const numberOfReferentialIntegrityProperties = this.reader.getInt16()\r\n        const startOfReferentialIntegrityDescriptor  = this.reader.getInt16()\r\n        const startOfData                            = this.reader.getInt16()\r\n        const sizeOfPropertiesStructure              = this.reader.getInt16()\r\n\r\n        let standardProperties = []\r\n        for ( let standardIndex = 0 ; standardIndex < numberOfStandardProperties ; standardIndex++ ) {\r\n            standardProperties.push( this._getStandardProperties() )\r\n        }\r\n\r\n        let customProperties = []\r\n        for ( let customIndex = 0 ; customIndex < numberOfCustomProperties ; customIndex++ ) {\r\n            customProperties.push( this._getCustomProperties() )\r\n        }\r\n\r\n        let referentialIntegrityProperties = []\r\n        for ( let referentialIntegrityIndex = 0 ; referentialIntegrityIndex < numberOfReferentialIntegrityProperties ; referentialIntegrityIndex++ ) {\r\n            referentialIntegrityProperties.push( this._getReferentialIntegrityProperties() )\r\n        }\r\n\r\n        return {\r\n            numberOfStandardProperties,\r\n            startOfStandardPropertiesDescriptor,\r\n            numberOfCustomProperties,\r\n            startOfCustomPropertiesDescriptor,\r\n            numberOfReferentialIntegrityProperties,\r\n            startOfReferentialIntegrityDescriptor,\r\n            startOfData,\r\n            sizeOfPropertiesStructure,\r\n            standardProperties,\r\n            customProperties,\r\n            referentialIntegrityProperties\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @return {{generationalNumber, tableFieldOffset, propertyDescribed: (*|number), type: (*|number), isConstraint: (*|number), offsetFromStart, widthOfDatabaseField}}\r\n     * @private\r\n     */\r\n    _getStandardProperties () {\r\n\r\n        const generationalNumber = this.reader.getInt16()\r\n        const tableFieldOffset   = this.reader.getInt16()\r\n        const propertyDescribed  = this.reader.getInt8()\r\n        const type               = this.reader.getInt8()\r\n        const isConstraint       = this.reader.getInt8()\r\n        this.reader.skipOffsetOf( 4 ) // Reserved\r\n        const offsetFromStart      = this.reader.getInt16()\r\n        const widthOfDatabaseField = this.reader.getInt16()\r\n\r\n        return {\r\n            generationalNumber,\r\n            tableFieldOffset,\r\n            propertyDescribed,\r\n            type,\r\n            isConstraint,\r\n            offsetFromStart,\r\n            widthOfDatabaseField\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @return {{generationalNumber, tableFieldOffset, type: (*|number), offsetFromStartOfName, lengthOfName, offsetFromStartOfData, lengthOfData}}\r\n     * @private\r\n     */\r\n    _getCustomProperties () {\r\n\r\n        const generationalNumber = this.reader.getInt16()\r\n        const tableFieldOffset   = this.reader.getInt16()\r\n        const type               = this.reader.getInt8()\r\n        this.reader.skipOffsetOf( 1 ) // Reserved\r\n        const offsetFromStartOfName = this.reader.getInt16()\r\n        const lengthOfName          = this.reader.getInt16()\r\n        const offsetFromStartOfData = this.reader.getInt16()\r\n        const lengthOfData          = this.reader.getInt16()\r\n\r\n        return {\r\n            generationalNumber,\r\n            tableFieldOffset,\r\n            type,\r\n            offsetFromStartOfName,\r\n            lengthOfName,\r\n            offsetFromStartOfData,\r\n            lengthOfData\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @return {{databaseState: (*|number), sequentialNumberRule, offsetOfTheRIRuleName, sizeOfTheRIRuleName, offsetOfNameOfForeignTable, sizeOfNameOfForeignTable, stateBehaviour: (*|number),\r\n     *     numberOfFieldsInLinkingKey, offsetOfLocalTableTagName, sizeOfTheLocalTableTagName, offsetOfForeignTableTagName, sizeOfTheForeignTableTagName}}\r\n     * @private\r\n     */\r\n    _getReferentialIntegrityProperties () {\r\n\r\n        const databaseState                = this.reader.getInt8()\r\n        const sequentialNumberRule         = this.reader.getInt16()\r\n        const offsetOfTheRIRuleName        = this.reader.getInt16()\r\n        const sizeOfTheRIRuleName          = this.reader.getInt16()\r\n        const offsetOfNameOfForeignTable   = this.reader.getInt16()\r\n        const sizeOfNameOfForeignTable     = this.reader.getInt16()\r\n        const stateBehaviour               = this.reader.getInt8()\r\n        const numberOfFieldsInLinkingKey   = this.reader.getInt16()\r\n        const offsetOfLocalTableTagName    = this.reader.getInt16()\r\n        const sizeOfTheLocalTableTagName   = this.reader.getInt16()\r\n        const offsetOfForeignTableTagName  = this.reader.getInt16()\r\n        const sizeOfTheForeignTableTagName = this.reader.getInt16()\r\n\r\n        return {\r\n            databaseState,\r\n            sequentialNumberRule,\r\n            offsetOfTheRIRuleName,\r\n            sizeOfTheRIRuleName,\r\n            offsetOfNameOfForeignTable,\r\n            sizeOfNameOfForeignTable,\r\n            stateBehaviour,\r\n            numberOfFieldsInLinkingKey,\r\n            offsetOfLocalTableTagName,\r\n            sizeOfTheLocalTableTagName,\r\n            offsetOfForeignTableTagName,\r\n            sizeOfTheForeignTableTagName\r\n        }\r\n\r\n    }\r\n\r\n} )\r\n\r\nexport { DBFLoader }\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nimport { TAbstractFileConverter } from 'itee-database'\r\nimport { DBFLoader }              from '../loaders/DBFLoader'\r\n\r\nclass DbfToThree extends TAbstractFileConverter {\r\n\r\n    constructor () {\r\n        super( TAbstractFileConverter.DumpType.ArrayBuffer )\r\n    }\r\n\r\n    _convert ( data, parameters, onSuccess, onProgress, onError ) {\r\n        super._convert( data, parameters, onSuccess, onProgress, onError )\r\n\r\n        try {\r\n\r\n            const loader    = new DBFLoader()\r\n            const threeData = loader.parse( data )\r\n            onSuccess( threeData )\r\n\r\n        } catch ( error ) {\r\n\r\n            onError( error )\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { DbfToThree }\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nimport { TAbstractFileConverter } from 'itee-database'\r\nimport { ObjectLoader }           from 'three-full'\r\n\r\nclass JsonToThree extends TAbstractFileConverter {\r\n\r\n    constructor () {\r\n        super( TAbstractFileConverter.DumpType.JSON )\r\n    }\r\n\r\n    _convert ( data, parameters, onSuccess, onProgress, onError ) {\r\n        super._convert( data, parameters, onSuccess, onProgress, onError )\r\n\r\n        try {\r\n\r\n            const loader    = new ObjectLoader()\r\n            const threeData = loader.parse( data )\r\n            onSuccess( threeData )\r\n\r\n        } catch ( error ) {\r\n\r\n            onError( error )\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { JsonToThree }\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nimport { TAbstractFileConverter } from 'itee-database'\r\nimport { MTLLoader }              from 'three-full'\r\n\r\nclass MtlToThree extends TAbstractFileConverter {\r\n\r\n    constructor () {\r\n        super( TAbstractFileConverter.DumpType.String )\r\n    }\r\n\r\n    _convert ( data, parameters, onSuccess, onProgress, onError ) {\r\n        super._convert( data, parameters, onSuccess, onProgress, onError )\r\n\r\n        try {\r\n\r\n            const loader    = new MTLLoader()\r\n            const threeData = loader.parse( data )\r\n            onSuccess( threeData )\r\n\r\n        } catch ( error ) {\r\n\r\n            onError( error )\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport { MtlToThree }\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nimport { TAbstractFileConverter } from 'itee-database'\r\nimport { OBJLoader2 }             from 'three-full'\r\n\r\nclass Obj2ToThree extends TAbstractFileConverter {\r\n\r\n    constructor () {\r\n        super( TAbstractFileConverter.DumpType.String )\r\n    }\r\n\r\n    _convert ( data, parameters, onSuccess, onProgress, onError ) {\r\n        super._convert( data, parameters, onSuccess, onProgress, onError )\r\n\r\n        try {\r\n\r\n            const loader    = new OBJLoader2()\r\n            const threeData = loader.parse( data )\r\n            onSuccess( threeData )\r\n\r\n        } catch ( error ) {\r\n\r\n            onError( error )\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { Obj2ToThree }\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * This class allow to split any geometries type during runtime.\r\n * Keeping normals and Uvs. It is really usefull to see inside mesh like building.\r\n *\r\n * Constructor parameter:\r\n *\r\n * size - the size of the square view\r\n *\r\n * @class Todo...\r\n * @classdesc Todo...\r\n * @example Todo...\r\n *\r\n */\r\n\r\n/* eslint-env browser */\r\n\r\nimport {\r\n    DefaultLogger,\r\n    Endianness,\r\n    TBinaryReader\r\n} from 'itee-client'\r\nimport {\r\n    DefaultLoadingManager,\r\n    FileLoader,\r\n    Shape,\r\n    Vector3\r\n} from 'three-full'\r\n\r\n/**\r\n *\r\n * @type {Object}\r\n */\r\nconst ShapeType = Object.freeze( {\r\n    NullShape:   0,\r\n    Point:       1,\r\n    Polyline:    3,\r\n    Polygon:     5,\r\n    MultiPoint:  8,\r\n    PointZ:      11,\r\n    PolyLineZ:   13,\r\n    PolygonZ:    15,\r\n    MultiPointZ: 18,\r\n    PointM:      21,\r\n    PolylineM:   23,\r\n    PolygonM:    25,\r\n    MultiPointM: 28,\r\n    MultiPatch:  31\r\n} )\r\n\r\n// Helpers\r\n/**\r\n *\r\n * @param ring\r\n * @return {boolean}\r\n */\r\nfunction ringClockwise ( ring ) {\r\n\r\n    if ( ( n = ring.length ) < 4 ) {\r\n        return false\r\n    }\r\n\r\n    var i = 0, n, area = ring[ n - 1 ][ 1 ] * ring[ 0 ][ 0 ] - ring[ n - 1 ][ 0 ] * ring[ 0 ][ 1 ]\r\n    while ( ++i < n ) {\r\n        area += ring[ i - 1 ][ 1 ] * ring[ i ][ 0 ] - ring[ i - 1 ][ 0 ] * ring[ i ][ 1 ]\r\n    }\r\n    return area >= 0\r\n}\r\n\r\n/**\r\n *\r\n * @param ring\r\n * @param hole\r\n * @return {boolean}\r\n */\r\nfunction ringContainsSome ( ring, hole ) {\r\n\r\n    var i = -1, n = hole.length, c\r\n    while ( ++i < n ) {\r\n        if ( c = ringContains( ring, hole[ i ] ) ) {\r\n            return c > 0\r\n        }\r\n    }\r\n    return false\r\n\r\n}\r\n\r\n/**\r\n *\r\n * @param ring\r\n * @param point\r\n * @return {number}\r\n */\r\nfunction ringContains ( ring, point ) {\r\n    var x = point[ 0 ], y = point[ 1 ], contains = -1\r\n    for ( var i = 0, n = ring.length, j = n - 1 ; i < n ; j = i++ ) {\r\n        var pi = ring[ i ], xi = pi[ 0 ], yi = pi[ 1 ],\r\n            pj                               = ring[ j ], xj = pj[ 0 ], yj = pj[ 1 ]\r\n        if ( segmentContains( pi, pj, point ) ) {\r\n            return 0\r\n        }\r\n        if ( ( ( yi > y ) !== ( yj > y ) ) && ( ( x < ( xj - xi ) * ( y - yi ) / ( yj - yi ) + xi ) ) ) {\r\n            contains = -contains\r\n        }\r\n    }\r\n    return contains\r\n}\r\n\r\n/**\r\n *\r\n * @param p0\r\n * @param p1\r\n * @param p2\r\n * @return {boolean}\r\n */\r\nfunction segmentContains ( p0, p1, p2 ) {\r\n    var x20 = p2[ 0 ] - p0[ 0 ], y20 = p2[ 1 ] - p0[ 1 ]\r\n    if ( x20 === 0 && y20 === 0 ) {\r\n        return true\r\n    }\r\n    var x10 = p1[ 0 ] - p0[ 0 ], y10 = p1[ 1 ] - p0[ 1 ]\r\n    if ( x10 === 0 && y10 === 0 ) {\r\n        return false\r\n    }\r\n    var t = ( x20 * x10 + y20 * y10 ) / ( x10 * x10 + y10 * y10 )\r\n    return t < 0 || t > 1 ? false : t === 0 || t === 1 ? true : t * x10 === x20 && t * y10 === y20\r\n}\r\n\r\n/**\r\n *\r\n * @param manager\r\n * @param logger\r\n * @constructor\r\n */\r\nfunction SHPLoader ( manager = DefaultLoadingManager, logger = DefaultLogger ) {\r\n\r\n    this.manager = manager\r\n    this.logger  = logger\r\n\r\n    this.globalOffset = new Vector3()\r\n    this.worldAxis    = {\r\n        from: 'zUp',\r\n        to:   'zForward'\r\n    }\r\n\r\n    this._reader = new TBinaryReader()\r\n\r\n}\r\n\r\nObject.assign( SHPLoader, {\r\n\r\n    /**\r\n     *\r\n     */\r\n    FileCode: 9994,\r\n\r\n    /**\r\n     *\r\n     */\r\n    MinFileLength: 100,\r\n\r\n    /**\r\n     *\r\n     */\r\n    MinVersion: 1000\r\n\r\n} )\r\n\r\nObject.assign( SHPLoader.prototype, {\r\n\r\n    /**\r\n     *\r\n     * @param url\r\n     * @param onLoad\r\n     * @param onProgress\r\n     * @param onError\r\n     */\r\n    load ( url, onLoad, onProgress, onError ) {\r\n\r\n        const scope = this\r\n\r\n        const loader = new FileLoader( scope.manager )\r\n        loader.setResponseType( 'arraybuffer' )\r\n        loader.load( url, arrayBuffer => {\r\n\r\n            onLoad( scope.parse( arrayBuffer ) )\r\n\r\n        }, onProgress, onError )\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param arrayBuffer\r\n     * @return {*}\r\n     */\r\n    parse ( arrayBuffer ) {\r\n\r\n        this._reader\r\n            .setEndianess( Endianness.Big )\r\n            .setBuffer( arrayBuffer )\r\n\r\n        const header = this._parseHeader()\r\n\r\n        if ( header.fileCode !== SHPLoader.FileCode ) {\r\n            this.logger.error( 'SHPLoader: Invalide Shape file code !' )\r\n            return null\r\n        }\r\n\r\n        if ( header.fileLength < SHPLoader.MinFileLength ) {\r\n            this.logger.error( 'SHPLoader: Shape file have an incorrect length !' )\r\n            return null\r\n        }\r\n\r\n        if ( !Object.values( ShapeType ).includes( header.shapeType ) ) {\r\n            this.logger.error( 'SHPLoader: Shape file have an incorrect shape type !' )\r\n            return null\r\n        }\r\n\r\n        if ( header.version < SHPLoader.MinVersion ) {\r\n            this.logger.warn( 'SHPLoader: Version of shape file below than 1000 could be incorrectly parsed !' )\r\n        }\r\n\r\n        const datas  = this._parseDatas( header )\r\n        const shapes = this._convertToObjects( datas )\r\n\r\n        return shapes\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @return {{fileCode, fileLength, version, shapeType, boundingBox: {xMin, xMax, yMin, yMax, zMin, zMax, mMin, mMax}}}\r\n     * @private\r\n     */\r\n    _parseHeader () {\r\n\r\n        const fileCode = this._reader.getInt32()\r\n        this._reader.skipOffsetOf( 20 )\r\n        const fileLength = this._reader.getInt32()\r\n\r\n        this._reader.setEndianess( Endianness.Little )\r\n\r\n        const version         = this._reader.getInt32()\r\n        const shapeType       = this._reader.getInt32()\r\n        const xMinBoundingBox = this._reader.getInt32()\r\n        const yMinBoundingBox = this._reader.getInt32()\r\n        const xMaxBoundingBox = this._reader.getInt32()\r\n        const yMaxBoundingBox = this._reader.getInt32()\r\n        const zMinBoundingBox = this._reader.getInt32()\r\n        const zMaxBoundingBox = this._reader.getInt32()\r\n        const mMinBoundingBox = this._reader.getInt32()\r\n        const mMaxBoundingBox = this._reader.getInt32()\r\n\r\n        return {\r\n            fileCode:    fileCode,\r\n            fileLength:  fileLength,\r\n            version:     version,\r\n            shapeType:   shapeType,\r\n            boundingBox: {\r\n                xMin: xMinBoundingBox,\r\n                xMax: xMaxBoundingBox,\r\n                yMin: yMinBoundingBox,\r\n                yMax: yMaxBoundingBox,\r\n                zMin: zMinBoundingBox,\r\n                zMax: zMaxBoundingBox,\r\n                mMin: mMinBoundingBox,\r\n                mMax: mMaxBoundingBox\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param header\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    _parseDatas ( header ) {\r\n\r\n        this._reader.skipOffsetTo( 100 )\r\n\r\n        let datas         = []\r\n        let recordHeader  = undefined\r\n        let endOfRecord   = undefined\r\n        let recordContent = undefined\r\n\r\n        while ( !this._reader.isEndOfFile() ) {\r\n\r\n            recordHeader = this._parseRecordHeader()\r\n            endOfRecord  = this._reader.getOffset() + ( recordHeader.contentLength * 2 )\r\n\r\n            // All parsing methods use little below\r\n            this._reader.setEndianess( Endianness.Little )\r\n\r\n            switch ( header.shapeType ) {\r\n\r\n                case ShapeType.NullShape:\r\n\r\n                    this._reader.skipOffsetTo( endOfRecord )\r\n\r\n                    //                    // Todo: just skip 1 byte - or - to endRecord\r\n                    //                    while ( this._reader.getOffset() < endOfRecord ) {\r\n                    //\r\n                    //                        recordContent = this._parseNull();\r\n                    //                        if ( recordContent ) {\r\n                    //                            datas.push( recordContent );\r\n                    //                        }\r\n                    //\r\n                    //                    }\r\n                    break\r\n\r\n                case ShapeType.Point:\r\n                case ShapeType.PointZ:\r\n                case ShapeType.PointM:\r\n                    while ( this._reader.getOffset() < endOfRecord ) {\r\n\r\n                        recordContent = this._parsePoint()\r\n                        if ( recordContent ) {\r\n                            datas.push( recordContent )\r\n                        }\r\n\r\n                    }\r\n                    break\r\n\r\n                case ShapeType.Polyline:\r\n                case ShapeType.PolyLineZ:\r\n                case ShapeType.PolylineM:\r\n                    while ( this._reader.getOffset() < endOfRecord ) {\r\n\r\n                        recordContent = this._parsePolyLine()\r\n                        if ( recordContent ) {\r\n                            datas.push( recordContent )\r\n                        }\r\n\r\n                    }\r\n                    break\r\n\r\n                case ShapeType.Polygon:\r\n                case ShapeType.PolygonZ:\r\n                case ShapeType.PolygonM:\r\n                    while ( this._reader.getOffset() < endOfRecord ) {\r\n\r\n                        recordContent = this._parsePolyLine()\r\n                        //                        recordContent = this._parsePolygon();\r\n                        if ( recordContent ) {\r\n                            datas.push( recordContent )\r\n                        }\r\n\r\n                    }\r\n                    break\r\n\r\n                case ShapeType.MultiPoint:\r\n                case ShapeType.MultiPointZ:\r\n                case ShapeType.MultiPointM:\r\n                    while ( this._reader.getOffset() < endOfRecord ) {\r\n\r\n                        recordContent = this._parseMultiPoint()\r\n                        if ( recordContent ) {\r\n                            datas.push( recordContent )\r\n                        }\r\n\r\n                    }\r\n                    break\r\n\r\n                case ShapeType.MultiPatch:\r\n                    while ( this._reader.getOffset() < endOfRecord ) {\r\n\r\n                        recordContent = this._parseMultiPatch()\r\n                        if ( recordContent ) {\r\n                            datas.push( recordContent )\r\n                        }\r\n\r\n                    }\r\n                    break\r\n\r\n                default:\r\n                    this.logger.error( `SHPLoader: Invalid switch parameter: ${shapeType}` )\r\n                    break\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return datas\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @return {{recordNumber, contentLength}}\r\n     * @private\r\n     */\r\n    _parseRecordHeader () {\r\n\r\n        this._reader.setEndianess( Endianness.Big )\r\n\r\n        const recordNumber  = this._reader.getInt32()\r\n        const contentLength = this._reader.getInt32()\r\n\r\n        return {\r\n            recordNumber,\r\n            contentLength\r\n        }\r\n\r\n    },\r\n\r\n    //    _parseNull () {\r\n    //\r\n    //        this._reader.getInt32();\r\n    //\r\n    //        return null;\r\n    //    },\r\n\r\n    /**\r\n     *\r\n     * @return {*}\r\n     * @private\r\n     */\r\n    _parsePoint () {\r\n\r\n        const shapeType = this._reader.getInt32()\r\n        if ( shapeType === ShapeType.NullShape ) {\r\n            return null\r\n        }\r\n\r\n        const x = this._reader.getFloat64()\r\n        const y = this._reader.getFloat64()\r\n\r\n        return {\r\n            shapeType,\r\n            x,\r\n            y\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @return {*}\r\n     * @private\r\n     */\r\n    _parsePolyLine () {\r\n\r\n        const shapeType = this._reader.getInt32()\r\n        if ( shapeType === ShapeType.NullShape ) {\r\n            return null\r\n        }\r\n\r\n        const boundingBox = {\r\n            xMin: this._reader.getFloat64(),\r\n            yMin: this._reader.getFloat64(),\r\n            xMax: this._reader.getFloat64(),\r\n            yMax: this._reader.getFloat64()\r\n        }\r\n\r\n        const numberOfParts  = this._reader.getInt32()\r\n        const numberOfPoints = this._reader.getInt32()\r\n\r\n        const parts = new Array( numberOfParts )\r\n        for ( let indexParts = 0 ; indexParts < numberOfParts ; indexParts++ ) {\r\n            parts[ indexParts ] = this._reader.getInt32()\r\n        }\r\n\r\n        const points = new Array( numberOfPoints )\r\n        for ( let indexPoint = 0 ; indexPoint < numberOfPoints ; indexPoint++ ) {\r\n            points[ indexPoint ] = {\r\n                x: this._reader.getFloat64(),\r\n                y: this._reader.getFloat64()\r\n            }\r\n        }\r\n\r\n        return {\r\n            shapeType,\r\n            boundingBox,\r\n            numberOfParts,\r\n            numberOfPoints,\r\n            parts,\r\n            points\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @return {*}\r\n     * @private\r\n     */\r\n    _parsePolygon () {\r\n\r\n        const shapeType = this._reader.getInt32()\r\n        if ( shapeType === ShapeType.NullShape ) {\r\n            return null\r\n        }\r\n\r\n        const boundingBox = {\r\n            xMin: this._reader.getFloat64(),\r\n            yMin: this._reader.getFloat64(),\r\n            xMax: this._reader.getFloat64(),\r\n            yMax: this._reader.getFloat64()\r\n        }\r\n\r\n        const numberOfParts  = this._reader.getInt32()\r\n        const numberOfPoints = this._reader.getInt32()\r\n\r\n        let parts = new Array( numberOfParts )\r\n        for ( let indexParts = 0 ; indexParts < numberOfParts ; indexParts++ ) {\r\n            parts[ indexParts ] = this._reader.getInt32()\r\n        }\r\n\r\n        let points = new Array( numberOfPoints )\r\n        for ( let indexPoint = 0 ; indexPoint < numberOfPoints ; indexPoint++ ) {\r\n            points[ indexPoint ] = {\r\n                x: this._reader.getFloat64(),\r\n                y: this._reader.getFloat64()\r\n            }\r\n        }\r\n\r\n        const polygons = []\r\n        const holes    = []\r\n\r\n        parts.forEach( ( value, index ) => {\r\n\r\n            const ring = points.slice( value, parts[ index + 1 ] )\r\n\r\n            if ( ringClockwise( ring ) ) {\r\n\r\n                polygons.push( ring )\r\n                //\t\t\t\t\tpolygons.push( [ ring ] );\r\n\r\n            } else {\r\n\r\n                holes.push( ring )\r\n\r\n            }\r\n\r\n        } )\r\n\r\n        holes.forEach( hole => {\r\n\r\n            polygons.some( polygon => {\r\n\r\n                if ( ringContainsSome( polygon[ 0 ], hole ) ) {\r\n                    polygon.push( hole )\r\n                    return true\r\n                }\r\n\r\n            } ) || polygons.push( [ hole ] )\r\n\r\n        } )\r\n\r\n        return {\r\n            shapeType,\r\n            boundingBox,\r\n            numberOfParts,\r\n            numberOfPoints,\r\n            parts,\r\n            polygons\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @return {*}\r\n     * @private\r\n     */\r\n    _parseMultiPoint () {\r\n\r\n        const shapeType = this._reader.getInt32()\r\n        if ( shapeType === ShapeType.NullShape ) {\r\n            return null\r\n        }\r\n\r\n        const boundingBox = {\r\n            xMin: this._reader.getFloat64(),\r\n            xMax: this._reader.getFloat64(),\r\n            yMin: this._reader.getFloat64(),\r\n            yMax: this._reader.getFloat64()\r\n        }\r\n\r\n        const numberOfPoints = this._reader.getInt32()\r\n\r\n        const points = new Array( numberOfPoints )\r\n\r\n        for ( let indexPoint = 0 ; indexPoint < numberOfPoints ; indexPoint++ ) {\r\n            points.push( [ this._reader.getFloat64(), this._reader.getFloat64() ] )\r\n        }\r\n\r\n        return {\r\n            shapeType,\r\n            boundingBox,\r\n            numberOfPoints,\r\n            points\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @return {*}\r\n     * @private\r\n     */\r\n    _parseMultiPatch () {\r\n\r\n        const shapeType = this._reader.getInt32()\r\n        if ( shapeType === ShapeType.NullShape ) {\r\n            return null\r\n        }\r\n\r\n        return {\r\n            shapeType\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param datas\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    _convertToObjects ( datas ) {\r\n\r\n        let shapes = []\r\n\r\n        for ( let index = 0, numberOfShapes = datas.length ; index < numberOfShapes ; index++ ) {\r\n            let data = datas[ index ]\r\n\r\n            if ( data.shapeType === ShapeType.Polygon || data.shapeType === ShapeType.PolygonZ || data.shapeType === ShapeType.PolygonM ) {\r\n\r\n                if ( data.points && Array.isArray( data.points[ 0 ] ) ) {\r\n\r\n                    __createObjectsFromArrays( data.points )\r\n\r\n                } else {\r\n\r\n                    __createObjectFromPoints( data.points )\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function __createObjectsFromArrays ( arrays ) {\r\n\r\n            //Todo: need to fix parsePolygon to avoid too much array imbrication\r\n\r\n            for ( let arrayIndex = 0, numberOfArray = arrays.length ; arrayIndex < numberOfArray ; arrayIndex++ ) {\r\n\r\n                let array = arrays[ arrayIndex ]\r\n\r\n                if ( !array ) {\r\n                    this.logger.log( 'no array, oups !' )\r\n                    continue\r\n                }\r\n\r\n                if ( Array.isArray( array[ 0 ] ) ) {\r\n\r\n                    __createObjectsFromArrays( array )\r\n\r\n                } else {\r\n\r\n                    __createObjectFromPoints( array )\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function __createObjectFromPoints ( points ) {\r\n\r\n            shapes.push( new Shape( points ) )\r\n\r\n        }\r\n\r\n        return shapes\r\n\r\n    }\r\n\r\n} )\r\n\r\nexport {\r\n    SHPLoader,\r\n    ShapeType\r\n}\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nimport { TAbstractFileConverter } from 'itee-database'\r\nimport { SHPLoader }              from '../loaders/SHPLoader'\r\n\r\nclass ShpToThree extends TAbstractFileConverter {\r\n\r\n    constructor () {\r\n        super( TAbstractFileConverter.DumpType.ArrayBuffer )\r\n    }\r\n\r\n    _convert ( data, parameters, onSuccess, onProgress, onError ) {\r\n        super._convert( data, parameters, onSuccess, onProgress, onError )\r\n\r\n        try {\r\n\r\n            const loader    = new SHPLoader()\r\n            const threeData = loader.parse( data )\r\n            onSuccess( threeData )\r\n\r\n        } catch ( error ) {\r\n\r\n            onError( error )\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { ShpToThree }\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nimport { TAbstractDataInserter } from 'itee-database'\r\nimport { isNotDefined }          from 'itee-validators'\r\n\r\nclass ThreeToMongoDB extends TAbstractDataInserter {\r\n\r\n    constructor ( Mongoose ) {\r\n\r\n        super( Mongoose )\r\n\r\n    }\r\n\r\n    _save ( data, parameters, onSuccess, onProgress, onError ) {\r\n\r\n        const self                 = this\r\n        const parentId             = parameters.parentId\r\n        const disableRootNode      = ( parameters.disableRootNode === 'true' )\r\n        const dataToParse          = ( disableRootNode ) ? data.children : ( Array.isArray( data ) ) ? data : [ data ]\r\n        const errors               = []\r\n        const numberOfRootChildren = dataToParse.length\r\n        let processedRootChildren  = 0\r\n\r\n        if ( numberOfRootChildren === 0 ) {\r\n            onError( 'No node to save in database !' )\r\n        }\r\n\r\n        let rootChildIndex = 0\r\n        checkNextRootChild()\r\n\r\n        function checkNextRootChild () {\r\n\r\n            const rootChild = dataToParse[ rootChildIndex ]\r\n\r\n            self._parse(\r\n                rootChild,\r\n                ( childrenIds ) => {\r\n\r\n                    processedRootChildren++\r\n\r\n                    onProgress( {\r\n                        name: rootChild.name,\r\n                        done: processedRootChildren,\r\n                        todo: numberOfRootChildren\r\n                    } )\r\n\r\n                    // In case the root object haven't parent or children skip update\r\n                    if ( isNotDefined( parentId ) || isNotDefined( childrenIds ) ) {\r\n\r\n                        checkEndOfParsing()\r\n                        return\r\n\r\n                    } else if ( typeof childrenIds === 'string' ) {\r\n\r\n                        // Convert single childrenId to array to avoid unecessary code duplication\r\n                        childrenIds = [ childrenIds ]\r\n\r\n                    } else {\r\n                        // already an array, it's ok\r\n                    }\r\n\r\n                    const Objects3DModelBase = self._driver.model( 'Objects3D' )\r\n                    Objects3DModelBase.findOneAndUpdate( { _id: parentId }, { $push: { children: childrenIds } }, ( error, rootObject ) => {\r\n\r\n                        if ( error ) {\r\n\r\n                            errors.push( error )\r\n                            checkEndOfParsing()\r\n                            return\r\n\r\n                        }\r\n\r\n                        if ( !rootObject ) {\r\n\r\n                            errors.push( `Unable to retrieve parent object with the given id: ${parentId} !!!` )\r\n                            checkEndOfParsing()\r\n                            return\r\n\r\n                        }\r\n\r\n                        // Update Children with parent id\r\n                        const rootId           = rootObject.id\r\n                        const numberOfChildren = childrenIds.length\r\n                        let endUpdates         = 0\r\n\r\n                        for ( let childIndex = 0 ; childIndex < numberOfChildren ; childIndex++ ) {\r\n\r\n                            let childId = childrenIds[ childIndex ]\r\n\r\n                            Objects3DModelBase.findByIdAndUpdate( childId, { $set: { parent: rootId } }, ( error, success ) => {\r\n\r\n                                if ( error ) {\r\n                                    errors.push( error )\r\n                                }\r\n\r\n                                endUpdates++\r\n                                if ( endUpdates < numberOfChildren ) {\r\n                                    return\r\n                                }\r\n\r\n                                checkEndOfParsing()\r\n\r\n                            } )\r\n\r\n                        }\r\n\r\n                    } )\r\n\r\n                },\r\n                onProgress,\r\n                onError\r\n            )\r\n\r\n        }\r\n\r\n        function checkEndOfParsing () {\r\n            rootChildIndex++\r\n            if ( rootChildIndex < numberOfRootChildren ) {\r\n                checkNextRootChild()\r\n                return\r\n            }\r\n\r\n            if ( errors.length > 0 ) {\r\n                onError( errors )\r\n            } else {\r\n                onSuccess( parentId )\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    _parse ( object, onSuccess, onProgress, onError ) {\r\n\r\n        const self             = this\r\n        const numberOfChildren = object.children.length\r\n        let childrenIds        = []\r\n        let childIndex         = 0\r\n\r\n        if ( numberOfChildren > 0 ) {\r\n\r\n            checkNextChild()\r\n\r\n        } else {\r\n\r\n            self._saveInDataBase( object, [], onError, onSuccess )\r\n\r\n        }\r\n\r\n        function checkNextChild () {\r\n\r\n            const child = object.children[ childIndex ]\r\n\r\n            self._parse(\r\n                child,\r\n                objectId => {\r\n\r\n                    childrenIds.push( objectId )\r\n\r\n                    onProgress( {\r\n                        name: child.name,\r\n                        done: childrenIds.length,\r\n                        todo: numberOfChildren\r\n                    } )\r\n\r\n                    if ( childrenIds.length < numberOfChildren ) {\r\n                        childIndex++\r\n                        checkNextChild()\r\n                        return\r\n                    }\r\n\r\n                    self._saveInDataBase( object, childrenIds, onError, onSuccess )\r\n\r\n                },\r\n                onProgress,\r\n                onError\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    ///////////\r\n\r\n    _parseUserData ( jsonUserData ) {\r\n\r\n        let userData = {}\r\n\r\n        for ( let prop in jsonUserData ) {\r\n            if ( jsonUserData.hasOwnProperty( prop ) ) {\r\n                userData[ prop.replace( /\\./g, '' ) ] = jsonUserData[ prop ]\r\n            }\r\n        }\r\n\r\n        return userData\r\n\r\n    }\r\n\r\n    _saveInDataBase ( object, childrenArrayIds, onError, onSuccess ) {\r\n\r\n        // Remove null ids that could come from invalid objects\r\n        const self        = this\r\n        const childrenIds = childrenArrayIds.filter( ( item ) => {\r\n            return item\r\n        } )\r\n\r\n        // Preprocess objects here to save geometry, materials and related before to save the object itself\r\n        const objectType = object.type\r\n        const geometry   = object.geometry\r\n        const materials  = object.material\r\n\r\n        if (\r\n            objectType === 'Curve' ||\r\n            objectType === 'ArcCurve' ||\r\n            objectType === 'CatmullRomCurve3' ||\r\n            objectType === 'CubicBezierCurve' ||\r\n            objectType === 'CubicBezierCurve3' ||\r\n            objectType === 'EllipseCurve' ||\r\n            objectType === 'LineCurve' ||\r\n            objectType === 'LineCurve3' ||\r\n            objectType === 'QuadraticBezierCurve' ||\r\n            objectType === 'QuadraticBezierCurve3' ||\r\n            objectType === 'SplineCurve' ||\r\n            objectType === 'CurvePath' ||\r\n            objectType === 'Path' ||\r\n            objectType === 'Shape'\r\n        ) {\r\n\r\n            self._saveCurveInDatabase( object, childrenIds, onError, onSuccess )\r\n\r\n        } else if ( geometry && materials ) {\r\n\r\n            if ( geometry.isGeometry ) {\r\n\r\n                // If it is a terminal object ( No children ) with an empty geometry\r\n                if ( childrenIds.length === 0 && ( !geometry.vertices || geometry.vertices.length === 0 ) ) {\r\n\r\n                    console.error( `Object ${object.name} geometry doesn't contain vertices ! Skip it.` )\r\n                    onSuccess( null )\r\n                    return\r\n\r\n                }\r\n\r\n                if ( objectType === 'Line' || objectType === 'LineLoop' || objectType === 'LineSegments' ) {\r\n\r\n                    // if material != LineBasicMaterial or LineDashedMaterial... ERROR\r\n                    if ( Array.isArray( materials ) ) {\r\n\r\n                        let materialOnError = false\r\n                        let material        = undefined\r\n                        let materialType    = undefined\r\n                        for ( let materialIndex = 0, numberOfMaterials = materials.length ; materialIndex < numberOfMaterials ; materialIndex++ ) {\r\n\r\n                            material     = materials[ materialIndex ]\r\n                            materialType = material.type\r\n                            if ( materialType !== 'LineBasicMaterial' && materialType !== 'LineDashedMaterial' ) {\r\n                                materialOnError = true\r\n                                break\r\n                            }\r\n\r\n                        }\r\n\r\n                        if ( materialOnError ) {\r\n\r\n                            console.error( `Object ${object.name} of type ${objectType}, contain an invalid material of type ${materialType} ! Skip it.` )\r\n                            onSuccess( null )\r\n                            return\r\n\r\n                        }\r\n\r\n                    } else if ( materials.type !== 'LineBasicMaterial' && materials.type !== 'LineDashedMaterial' ) {\r\n\r\n                        console.error( `Object ${object.name} of type ${objectType}, contain an invalid material of type ${materials.type} ! Skip it.` )\r\n                        onSuccess( null )\r\n                        return\r\n\r\n                    } else {\r\n\r\n                        // Materials are ok for this type of object\r\n\r\n                    }\r\n\r\n                } else if ( objectType === 'Points' ) {\r\n\r\n                    // if material != PointsMaterial... ERROR\r\n\r\n                    if ( Array.isArray( materials ) ) {\r\n\r\n                        let materialOnError = false\r\n                        let material        = undefined\r\n                        let materialType    = undefined\r\n                        for ( let materialIndex = 0, numberOfMaterials = materials.length ; materialIndex < numberOfMaterials ; materialIndex++ ) {\r\n\r\n                            material     = materials[ materialIndex ]\r\n                            materialType = material.type\r\n                            if ( materialType !== 'PointsMaterial' ) {\r\n                                materialOnError = true\r\n                                break\r\n                            }\r\n\r\n                        }\r\n\r\n                        if ( materialOnError ) {\r\n\r\n                            console.error( `Object ${object.name} of type ${objectType}, contain an invalid material of type ${materialType} ! Skip it.` )\r\n                            onSuccess( null )\r\n                            return\r\n\r\n                        }\r\n\r\n                    } else if ( materials.type !== 'PointsMaterial' ) {\r\n\r\n                        console.error( `Object ${object.name} of type ${objectType}, contain an invalid material of type ${materials.type} ! Skip it.` )\r\n                        onSuccess( null )\r\n                        return\r\n\r\n                    } else {\r\n\r\n                        // Materials are ok for this type of object\r\n\r\n                    }\r\n\r\n                } else {\r\n\r\n                    // Regular object\r\n\r\n                }\r\n\r\n                self._saveGeometryInDatabase( geometry, onError, ( geometryId ) => {\r\n\r\n                    self._saveMaterialInDatabase( materials, onError, ( materialIds ) => {\r\n\r\n                        self._saveObject3DInDatabase( object, childrenIds, geometryId, materialIds, onError, onSuccess )\r\n\r\n                    } )\r\n\r\n                } )\r\n\r\n            } else if ( geometry.isBufferGeometry ) {\r\n\r\n                // If it is a terminal object ( No children ) with an empty geometry\r\n                if ( childrenIds.length === 0 && ( !geometry.attributes[ 'position' ] || geometry.attributes[ 'position' ].count === 0 ) ) {\r\n\r\n                    console.error( `Object ${object.name} geometry doesn't contain vertices ! Skip it.` )\r\n                    onSuccess( null )\r\n                    return\r\n\r\n                }\r\n\r\n                if ( objectType === 'Line' || objectType === 'LineLoop' || objectType === 'LineSegments' ) {\r\n\r\n                    // if material != LineBasicMaterial or LineDashedMaterial... ERROR\r\n                    if ( Array.isArray( materials ) ) {\r\n\r\n                        let materialOnError = false\r\n                        let material        = undefined\r\n                        let materialType    = undefined\r\n                        for ( let materialIndex = 0, numberOfMaterials = materials.length ; materialIndex < numberOfMaterials ; materialIndex++ ) {\r\n\r\n                            material     = materials[ materialIndex ]\r\n                            materialType = material.type\r\n                            if ( materialType !== 'LineBasicMaterial' && materialType !== 'LineDashedMaterial' ) {\r\n                                materialOnError = true\r\n                                break\r\n                            }\r\n\r\n                        }\r\n\r\n                        if ( materialOnError ) {\r\n\r\n                            console.error( `Object ${object.name} of type ${objectType}, contain an invalid material of type ${materialType} ! Skip it.` )\r\n                            onSuccess( null )\r\n                            return\r\n\r\n                        }\r\n\r\n                    } else if ( materials.type !== 'LineBasicMaterial' && materials.type !== 'LineDashedMaterial' ) {\r\n\r\n                        console.error( `Object ${object.name} of type ${objectType}, contain an invalid material of type ${materials.type} ! Skip it.` )\r\n                        onSuccess( null )\r\n                        return\r\n\r\n                    } else {\r\n\r\n                        // Materials are ok for this type of object\r\n\r\n                    }\r\n\r\n                } else if ( objectType === 'Points' ) {\r\n\r\n                    // if material != PointsMaterial... ERROR\r\n\r\n                    if ( Array.isArray( materials ) ) {\r\n\r\n                        let materialOnError = false\r\n                        let material        = undefined\r\n                        let materialType    = undefined\r\n                        for ( let materialIndex = 0, numberOfMaterials = materials.length ; materialIndex < numberOfMaterials ; materialIndex++ ) {\r\n\r\n                            material     = materials[ materialIndex ]\r\n                            materialType = material.type\r\n                            if ( materialType !== 'PointsMaterial' ) {\r\n                                materialOnError = true\r\n                                break\r\n                            }\r\n\r\n                        }\r\n\r\n                        if ( materialOnError ) {\r\n\r\n                            console.error( `Object ${object.name} of type ${objectType}, contain an invalid material of type ${materialType} ! Skip it.` )\r\n                            onSuccess( null )\r\n                            return\r\n\r\n                        }\r\n\r\n                    } else if ( materials.type !== 'PointsMaterial' ) {\r\n\r\n                        console.error( `Object ${object.name} of type ${objectType}, contain an invalid material of type ${materials.type} ! Skip it.` )\r\n                        onSuccess( null )\r\n                        return\r\n\r\n                    } else {\r\n\r\n                        // Materials are ok for this type of object\r\n\r\n                    }\r\n\r\n                } else {\r\n\r\n                    // Regular object\r\n\r\n                }\r\n\r\n                self._saveBufferGeometryInDatabase( geometry, onError, ( geometryId ) => {\r\n\r\n                    self._saveMaterialInDatabase( materials, onError, ( materialIds ) => {\r\n\r\n                        self._saveObject3DInDatabase( object, childrenIds, geometryId, materialIds, onError, onSuccess )\r\n\r\n                    } )\r\n\r\n                } )\r\n\r\n            } else {\r\n\r\n                console.error( `Object ${object.name} contain an unknown/unmanaged geometry of type ${geometry.type} ! Skip it.` )\r\n                onSuccess( null )\r\n\r\n            }\r\n\r\n        } else if ( geometry && !materials ) {\r\n\r\n            // Is this right ??? Object can have geometry without material ???\r\n\r\n            if ( geometry.isGeometry ) {\r\n\r\n                // If it is a terminal object ( No children ) with an empty geometry\r\n                if ( childrenIds.length === 0 && ( !geometry.vertices || geometry.vertices.length === 0 ) ) {\r\n\r\n                    console.error( `Mesh ${object.name} geometry doesn't contain vertices ! Skip it.` )\r\n                    onSuccess( null )\r\n                    return\r\n\r\n                }\r\n\r\n                self._saveGeometryInDatabase( geometry, onError, ( geometryId ) => {\r\n\r\n                    self._saveObject3DInDatabase( object, childrenIds, geometryId, [], onError, onSuccess )\r\n\r\n                } )\r\n\r\n            } else if ( geometry.isBufferGeometry ) {\r\n\r\n                // If it is a terminal object ( No children ) with an empty geometry\r\n                if ( childrenIds.length === 0 && ( !geometry.attributes[ 'position' ] || geometry.attributes[ 'position' ].count === 0 ) ) {\r\n\r\n                    console.error( `Mesh ${object.name} buffer geometry doesn't contain position attributes ! Skip it.` )\r\n                    onSuccess( null )\r\n                    return\r\n\r\n                }\r\n\r\n                self._saveBufferGeometryInDatabase( geometry, onError, ( geometryId ) => {\r\n\r\n                    self._saveObject3DInDatabase( object, childrenIds, geometryId, null, onError, onSuccess )\r\n\r\n                } )\r\n\r\n            } else {\r\n\r\n                console.error( `Object ${object.name} contain an unknown/unmanaged geometry of type ${geometry.type} ! Skip it.` )\r\n                onSuccess( null )\r\n\r\n            }\r\n\r\n        } else if ( !geometry && materials ) {\r\n\r\n            if ( objectType === 'Sprite' ) {\r\n\r\n                // if material != SpriteMaterial... ERROR\r\n                if ( Array.isArray( materials ) ) {\r\n\r\n                    let materialOnError = false\r\n                    let material        = undefined\r\n                    let materialType    = undefined\r\n                    for ( let materialIndex = 0, numberOfMaterials = materials.length ; materialIndex < numberOfMaterials ; materialIndex++ ) {\r\n\r\n                        material     = materials[ materialIndex ]\r\n                        materialType = material.type\r\n                        if ( materialType !== 'SpriteMaterial' ) {\r\n                            materialOnError = true\r\n                            break\r\n                        }\r\n\r\n                    }\r\n\r\n                    if ( materialOnError ) {\r\n\r\n                        console.error( `Object ${object.name} of type ${objectType}, contain an invalid material of type ${materialType} ! Skip it.` )\r\n                        onSuccess( null )\r\n                        return\r\n\r\n                    }\r\n\r\n                } else if ( materials.type !== 'SpriteMaterial' ) {\r\n\r\n                    console.error( `Object ${object.name} of type ${objectType}, contain an invalid material of type ${materials.type} ! Skip it.` )\r\n                    onSuccess( null )\r\n                    return\r\n\r\n                } else {\r\n\r\n                    // Materials are ok for this type of object\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                console.error( `Missing geometry for object ${object.name} of type ${objectType}. Only Sprite can contains material without geometry ! Skip it.` )\r\n                onSuccess( null )\r\n                return\r\n\r\n            }\r\n\r\n            self._saveMaterialInDatabase( materials, onError, ( materialIds ) => {\r\n\r\n                self._saveObject3DInDatabase( object, childrenIds, null, materialIds, onError, onSuccess )\r\n\r\n            } )\r\n\r\n        } else {\r\n\r\n            self._saveObject3DInDatabase( object, childrenIds, null, null, onError, onSuccess )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // Object3D\r\n\r\n    _checkIfObject3DAlreadyExist ( object ) {\r\n\r\n        // Todo\r\n        return null\r\n\r\n    }\r\n\r\n    _getObject3DModel ( object, childrenIds, geometryId, materialsIds ) {\r\n\r\n        object.parent   = null\r\n        object.children = childrenIds\r\n        object.geometry = geometryId\r\n        object.material = materialsIds\r\n\r\n        return this._driver.model( object.type )( object )\r\n\r\n    }\r\n\r\n    _saveObject3DInDatabase ( object, childrenIds, geometryId, materialsIds, onError, onSuccess ) {\r\n\r\n        const self     = this\r\n        const objectId = this._checkIfObject3DAlreadyExist( object )\r\n\r\n        if ( objectId ) {\r\n\r\n            onSuccess( objectId )\r\n\r\n        } else {\r\n\r\n            this._getObject3DModel( object, childrenIds, geometryId, materialsIds )\r\n                .save()\r\n                .then( savedObject => {\r\n\r\n                    const objectId = savedObject.id\r\n\r\n                    // Update Children with parent id\r\n                    if ( childrenIds && childrenIds.length > 0 ) {\r\n                        updateChildren( onError, onSuccess )\r\n                    } else {\r\n                        onSuccess( objectId )\r\n                    }\r\n\r\n                    function updateChildren ( onError, onSuccess ) {\r\n\r\n                        const savedChildrenIds = savedObject._doc.children\r\n                        const numberOfChildren = savedChildrenIds.length\r\n\r\n                        let endUpdates = 0\r\n                        let childId    = undefined\r\n                        const errors   = []\r\n\r\n                        for ( let childIndex = 0 ; childIndex < numberOfChildren ; childIndex++ ) {\r\n\r\n                            childId = savedChildrenIds[ childIndex ]\r\n\r\n                            const Objects3DModelBase = self._driver.model( 'Objects3D' )\r\n                            Objects3DModelBase.findByIdAndUpdate( childId, { $set: { parent: objectId } }, ( error, success ) => {\r\n\r\n                                if ( error ) {\r\n                                    errors.push( error )\r\n                                }\r\n\r\n                                endUpdates++\r\n                                if ( endUpdates < numberOfChildren ) {\r\n                                    return\r\n                                }\r\n\r\n                                returnResult( onError, onSuccess )\r\n\r\n                            } )\r\n\r\n                        }\r\n\r\n                        function returnResult ( onError, onSuccess ) {\r\n\r\n                            if ( errors.length > 0 ) {\r\n                                onError( errors )\r\n                            } else {\r\n                                onSuccess( objectId )\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } )\r\n                .catch( onError )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // Curve\r\n\r\n    _checkIfCurveAlreadyExist ( curve ) {\r\n\r\n        // Todo\r\n        return null\r\n\r\n    }\r\n\r\n    _getCurveModel ( curve ) {\r\n\r\n        return this._driver.model( curve.type )( curve )\r\n\r\n    }\r\n\r\n    _saveCurveInDatabase ( curve, onError, onSuccess ) {\r\n\r\n        const curveId = this._checkIfCurveAlreadyExist( curve )\r\n\r\n        if ( curveId ) {\r\n\r\n            onSuccess( curveId )\r\n\r\n        } else {\r\n\r\n            this._getCurveModel( curve )\r\n                .save()\r\n                .then( savedCurve => { onSuccess( savedCurve.id ) } )\r\n                .catch( onError )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // Geometry\r\n\r\n    _checkIfGeometryAlreadyExist ( geometry ) {\r\n\r\n        // Todo\r\n        return null\r\n\r\n    }\r\n\r\n    _getGeometryModel ( geometry ) {\r\n\r\n        return this._driver.model( geometry.type )( geometry )\r\n\r\n    }\r\n\r\n    _saveGeometryInDatabase ( geometry, onError, onSuccess ) {\r\n\r\n        const geometryId = this._checkIfGeometryAlreadyExist( geometry )\r\n\r\n        if ( geometryId ) {\r\n\r\n            onSuccess( geometryId )\r\n\r\n        } else {\r\n\r\n            this._getGeometryModel( geometry )\r\n                .save()\r\n                .then( savedGeometry => { onSuccess( savedGeometry.id ) } )\r\n                .catch( onError )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // BufferGeometry\r\n\r\n    _checkIfBufferGeometryAlreadyExist ( bufferGeometry ) {\r\n\r\n        // Todo\r\n        return null\r\n\r\n    }\r\n\r\n    _getBufferGeometryModel ( bufferGeometry ) {\r\n\r\n        return this._driver.model( bufferGeometry.type )( bufferGeometry )\r\n\r\n    }\r\n\r\n    _saveBufferGeometryInDatabase ( bufferGeometry, onError, onSuccess ) {\r\n\r\n        const bufferGeometryId = this._checkIfBufferGeometryAlreadyExist( bufferGeometry )\r\n\r\n        if ( bufferGeometryId ) {\r\n\r\n            onSuccess( bufferGeometryId )\r\n\r\n        } else {\r\n\r\n            this._getBufferGeometryModel( bufferGeometry )\r\n                .save()\r\n                .then( savedBufferGeometry => { onSuccess( savedBufferGeometry.id ) } )\r\n                .catch( onError )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // Material\r\n\r\n    _checkIfMaterialAlreadyExist ( materials ) {\r\n\r\n        // Todo\r\n        return null\r\n\r\n    }\r\n\r\n    _getMaterialModel ( material, texturesIds ) {\r\n\r\n        material.texturesIds = texturesIds\r\n\r\n        return this._driver.model( material.type )( material )\r\n\r\n    }\r\n\r\n    _saveMaterialInDatabase ( materials, onError, onSuccess ) {\r\n\r\n        const self = this\r\n        if ( Array.isArray( materials ) ) {\r\n\r\n            const numberOfMaterials    = materials.length\r\n            let materialIds            = new Array( numberOfMaterials )\r\n            let numberOfSavedMaterials = 0\r\n            let material               = undefined\r\n            for ( let materialIndex = 0 ; materialIndex < numberOfMaterials ; materialIndex++ ) {\r\n\r\n                material         = materials[ materialIndex ]\r\n                const materialId = this._checkIfMaterialAlreadyExist( material )\r\n\r\n                if ( materialId ) {\r\n\r\n                    materialIds[ materialIndex ] = materialId\r\n                    numberOfSavedMaterials++\r\n\r\n                    // End condition\r\n                    if ( numberOfSavedMaterials === numberOfMaterials ) {\r\n                        onSuccess( materialIds )\r\n                    }\r\n\r\n                } else {\r\n\r\n                    ( function closeIndex () {\r\n\r\n                        const materialLocalIndex = materialIndex\r\n\r\n                        self._getMaterialModel( material )\r\n                            .save()\r\n                            .then( savedMaterial => {\r\n\r\n                                materialIds[ materialLocalIndex ] = savedMaterial.id\r\n                                numberOfSavedMaterials++\r\n\r\n                                // End condition\r\n                                if ( numberOfSavedMaterials === numberOfMaterials ) {\r\n                                    onSuccess( materialIds )\r\n                                }\r\n\r\n                            } )\r\n                            .catch( onError )\r\n\r\n                    } )()\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            const materialId = this._checkIfMaterialAlreadyExist( materials )\r\n\r\n            if ( materialId ) {\r\n\r\n                onSuccess( materialId )\r\n\r\n            } else {\r\n\r\n                this._getMaterialModel( materials )\r\n                    .save()\r\n                    .then( savedMaterial => {\r\n\r\n                        // Return id\r\n                        onSuccess( savedMaterial.id )\r\n\r\n                    } )\r\n                    .catch( onError )\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // Texture\r\n\r\n    _checkIfTextureAlreadyExist ( texture ) {\r\n\r\n        // Todo\r\n        return null\r\n\r\n    }\r\n\r\n    _getTextureModel ( texture ) {\r\n\r\n        return this._driver.model( texture.type )( texture )\r\n\r\n    }\r\n\r\n    _saveTextureInDatabase ( texture, onError, onSuccess ) {\r\n\r\n        const textureId = this._checkIfTextureAlreadyExist( texture )\r\n\r\n        if ( textureId ) {\r\n\r\n            onSuccess( textureId )\r\n\r\n        } else {\r\n\r\n            this._getTextureModel( texture )\r\n                .save()\r\n                .then( savedTexture => { onSuccess( savedTexture.id ) } )\r\n                .catch( onError )\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { ThreeToMongoDB }\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\n/*\r\n import { BSON_DATA_OBJECT } from 'bson'\r\n import {\r\n isNotDefined,\r\n isNotNumber,\r\n isNotObject\r\n }                           from 'itee-validators'\r\n import Mongoose             from 'mongoose'\r\n\r\n class Color extends Mongoose.SchemaType {\r\n\r\n constructor ( key, options ) {\r\n\r\n super( key, options, 'Color' )\r\n\r\n }\r\n\r\n cast ( value ) {\r\n\r\n if ( isNotDefined( value ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} is null or undefined` ) }\r\n if ( isNotObject( value ) && !value.isColor ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} is not a object or Color instance` ) }\r\n\r\n if ( !( 'r' in value ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} does not contain r property` ) }\r\n if ( isNotNumber( value.r ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} expected to be a number` ) }\r\n\r\n if ( !( 'g' in value ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} does not contain g property` ) }\r\n if ( isNotNumber( value.g ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} expected to be a number` ) }\r\n\r\n if ( !( 'b' in value ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} does not contain b property` ) }\r\n if ( isNotNumber( value.b ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} expected to be a number` ) }\r\n\r\n return {\r\n r: value.r,\r\n g: value.g,\r\n b: value.b\r\n }\r\n\r\n }\r\n\r\n }\r\n\r\n Color.COLOR_BSON_TYPE = BSON_DATA_OBJECT\r\n\r\n // Register type\r\n Mongoose.Schema.Types.Color = Color\r\n\r\n export { Color }\r\n */\r\n\r\n/*\r\nconst { isNotDefined, isNotNumber, isNotObject } = require( 'itee-validators' )\r\nconst { BSON_DATA_OBJECT }                       = require( 'bson' )\r\n\r\nfunction ColorType ( Mongoose ) {\r\n    'use strict'\r\n\r\n    class Color extends Mongoose.SchemaType {\r\n\r\n        constructor ( key, options ) {\r\n\r\n            super( key, options, 'Color' )\r\n\r\n        }\r\n\r\n        cast ( value ) {\r\n\r\n            if ( isNotDefined( value ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} is null or undefined` ) }\r\n            if ( isNotObject( value ) && !value.isColor ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} is not a object or Color instance` ) }\r\n\r\n            if ( !( 'r' in value ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} does not contain r property` ) }\r\n            if ( isNotNumber( value.r ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} expected to be a number` ) }\r\n\r\n            if ( !( 'g' in value ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} does not contain g property` ) }\r\n            if ( isNotNumber( value.g ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} expected to be a number` ) }\r\n\r\n            if ( !( 'b' in value ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} does not contain b property` ) }\r\n            if ( isNotNumber( value.b ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} expected to be a number` ) }\r\n\r\n            return {\r\n                r: value.r,\r\n                g: value.g,\r\n                b: value.b\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    Color.COLOR_BSON_TYPE = BSON_DATA_OBJECT\r\n\r\n    // Register type\r\n    Mongoose.Schema.Types.Color = Color\r\n\r\n    return Mongoose\r\n\r\n}\r\n\r\nmodule.exports = { ColorType }\r\n*/\r\n\r\nimport {\r\n    isNotDefined,\r\n    isNotNumber,\r\n    isNotObject\r\n}                           from 'itee-validators'\r\nimport { BSON_DATA_OBJECT } from 'bson'\r\n\r\nfunction ColorType ( Mongoose ) {\r\n    'use strict'\r\n\r\n    class Color extends Mongoose.SchemaType {\r\n\r\n        constructor ( key, options ) {\r\n\r\n            super( key, options, 'Color' )\r\n\r\n        }\r\n\r\n        cast ( value ) {\r\n\r\n            if ( isNotDefined( value ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} is null or undefined` ) }\r\n            if ( isNotObject( value ) && !value.isColor ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} is not a object or Color instance` ) }\r\n\r\n            if ( !( 'r' in value ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} does not contain r property` ) }\r\n            if ( isNotNumber( value.r ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} expected to be a number` ) }\r\n\r\n            if ( !( 'g' in value ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} does not contain g property` ) }\r\n            if ( isNotNumber( value.g ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} expected to be a number` ) }\r\n\r\n            if ( !( 'b' in value ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} does not contain b property` ) }\r\n            if ( isNotNumber( value.b ) ) { throw new Mongoose.SchemaType.CastError( `Color: ${value} expected to be a number` ) }\r\n\r\n            return {\r\n                r: value.r,\r\n                g: value.g,\r\n                b: value.b\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    Color.COLOR_BSON_TYPE = BSON_DATA_OBJECT\r\n\r\n    // Register type\r\n    Mongoose.Schema.Types.Color = Color\r\n\r\n    return Mongoose\r\n\r\n}\r\n\r\nexport { ColorType }\r\n","/**\r\n * @author [Tristan Valcke]{@link https://github.com/Itee}\r\n * @license [MIT]{@link https://opensource.org/licenses/MIT}\r\n *\r\n * @file Todo\r\n *\r\n * @example Todo\r\n *\r\n */\r\n\r\nimport {\r\n    TAbstractConverterManager,\r\n    TMongoDBPlugin,\r\n    TMongooseController\r\n}                         from 'itee-database'\r\nimport { DbfToThree }     from './converters/DbfToThree'\r\nimport { JsonToThree }    from './converters/JsonToThree'\r\nimport { MtlToThree }     from './converters/MtlToThree'\r\nimport { Obj2ToThree }    from './converters/Obj2ToThree'\r\nimport { ShpToThree }     from './converters/ShpToThree'\r\nimport { ThreeToMongoDB } from './converters/ThreeToMongoDB'\r\nimport { ColorType }      from './types/Color'\r\n\r\nexport default new TMongoDBPlugin()\r\n    .addType( ColorType )\r\n    .addController( TMongooseController )\r\n    .addDescriptor( {\r\n        route:      '/objects',\r\n        controller: {\r\n            name:    'TMongooseController',\r\n            options: {\r\n                schemaName: 'Objects3D'\r\n            },\r\n            can:     {\r\n                create: {\r\n                    on:   'put',\r\n                    over: '/(:id)?'\r\n                },\r\n                read:   {\r\n                    on:   'post',\r\n                    over: '/(:id)?'\r\n                },\r\n                update: {\r\n                    on:   'patch',\r\n                    over: '/(:id)?'\r\n                },\r\n                delete: {\r\n                    on:   'delete',\r\n                    over: '/(:id)?'\r\n                }\r\n            }\r\n        }\r\n    } )\r\n    .addDescriptor( {\r\n        route:      '/curves',\r\n        controller: {\r\n            name:    'TMongooseController',\r\n            options: {\r\n                schemaName: 'Curves'\r\n            },\r\n            can:     {\r\n                create: {\r\n                    on:   'put',\r\n                    over: '/(:id)?'\r\n                },\r\n                read:   {\r\n                    on:   'post',\r\n                    over: '/(:id)?'\r\n                },\r\n                update: {\r\n                    on:   'patch',\r\n                    over: '/(:id)?'\r\n                },\r\n                delete: {\r\n                    on:   'delete',\r\n                    over: '/(:id)?'\r\n                }\r\n            }\r\n        }\r\n    } )\r\n    .addDescriptor( {\r\n        route:      '/geometries',\r\n        controller: {\r\n            name:    'TMongooseController',\r\n            options: {\r\n                schemaName: 'Geometries'\r\n            },\r\n            can:     {\r\n                create: {\r\n                    on:   'put',\r\n                    over: '/(:id)?'\r\n                },\r\n                read:   {\r\n                    on:   'post',\r\n                    over: '/(:id)?'\r\n                },\r\n                update: {\r\n                    on:   'patch',\r\n                    over: '/(:id)?'\r\n                },\r\n                delete: {\r\n                    on:   'delete',\r\n                    over: '/(:id)?'\r\n                }\r\n            }\r\n        }\r\n    } )\r\n    .addDescriptor( {\r\n        route:      '/materials',\r\n        controller: {\r\n            name:    'TMongooseController',\r\n            options: {\r\n                schemaName: 'Materials'\r\n            },\r\n            can:     {\r\n                create: {\r\n                    on:   'put',\r\n                    over: '/(:id)?'\r\n                },\r\n                read:   {\r\n                    on:   'post',\r\n                    over: '/(:id)?'\r\n                },\r\n                update: {\r\n                    on:   'patch',\r\n                    over: '/(:id)?'\r\n                },\r\n                delete: {\r\n                    on:   'delete',\r\n                    over: '/(:id)?'\r\n                }\r\n            }\r\n        }\r\n    } )\r\n    .addDescriptor( {\r\n        route:      '/textures',\r\n        controller: {\r\n            name:    'TMongooseController',\r\n            options: {\r\n                schemaName: 'Textures'\r\n            },\r\n            can:     {\r\n                create: {\r\n                    on:   'put',\r\n                    over: '/(:id)?'\r\n                },\r\n                read:   {\r\n                    on:   'post',\r\n                    over: '/(:id)?'\r\n                },\r\n                update: {\r\n                    on:   'patch',\r\n                    over: '/(:id)?'\r\n                },\r\n                delete: {\r\n                    on:   'delete',\r\n                    over: '/(:id)?'\r\n                }\r\n            }\r\n        }\r\n    } )\r\n    .addController( TAbstractConverterManager )\r\n    .addDescriptor( {\r\n        route:      '/uploads',\r\n        controller: {\r\n            name:    'TAbstractConverterManager',\r\n            options: {\r\n                useNext:    true,\r\n                converters: {\r\n                    JsonToThree: new JsonToThree(),\r\n                    ShpToThree:  new ShpToThree(),\r\n                    DbfToThree:  new DbfToThree(),\r\n                    MtlToThree:  new MtlToThree(),\r\n                    ObjToThree:  new Obj2ToThree()\r\n                },\r\n                rules:      [\r\n                    {\r\n                        on:  '.json',\r\n                        use: 'JsonToThree'\r\n                    },\r\n                    {\r\n                        on:  '.shp',\r\n                        use: 'ShpToThree'\r\n                    },\r\n                    {\r\n                        on:  '.dbf',\r\n                        use: 'DbfToThree'\r\n                    },\r\n                    {\r\n                        on:  [ '.shp', '.dbf' ],\r\n                        use: [ 'ShpToThree', 'DbfToThree' ]\r\n                    },\r\n                    {\r\n                        on:  '.mtl',\r\n                        use: 'MtlToThree'\r\n                    },\r\n                    {\r\n                        on:  '.obj',\r\n                        use: 'ObjToThree'\r\n                    },\r\n                    {\r\n                        on:  [ '.mtl', '.obj' ],\r\n                        use: [ 'MtlToThree', 'ObjToThree' ]\r\n                    }\r\n                ],\r\n                inserter:   ThreeToMongoDB\r\n            },\r\n            can:     {\r\n                processFiles: {\r\n                    on:   'post',\r\n                    over: '/'\r\n                }\r\n            }\r\n        }\r\n    } )\r\n"],"names":["DBFVersion","Object","freeze","FoxPro","FoxPro_Autoincrement","dBASE_II","FoxPro_Var","dBASE_III_plus","dBASE_III_plus_memo","dBASE_IV_SQL_table","dBASE_IV_SQL_system","dBASE_IV_memo","dBASE_IV_memo_SQL_table","FoxBase","dBase_v_7","FoxPro_2_x","HiPerSix_memo","DataType","Binary","Character","Date","Numeric","Logical","Memo","Timestamp","Long","Autoincrement","Float","Double","OLE","DBFLoader","manager","DefaultLoadingManager","logger","DefaultLogger","this","reader","TBinaryReader","assign","Terminator","DeletedRecord","YearOffset","prototype","[object Object]","url","onLoad","onProgress","onError","scope","loader","FileLoader","setResponseType","load","arrayBuffer","parse","setEndianess","Endianness","Big","setBuffer","version","getInt8","_isValidVersion","error","header","_parseHeader","datas","_parseDatas","values","includes","_parseHeaderV2","_parseHeaderV3","_parseHeaderV4","RangeError","getUint8","numberOfRecords","getInt16","year","month","day","lengthOfEachRecords","fields","name","undefined","type","length","memoryAddress","decimalCount","fieldIndex","getString","getChar","push","Little","getInt32","numberOfByteInHeader","numberOfByteInRecord","skipOffsetOf","workAreaId","MDXFlag","incompleteTransactionFlag","encryptionFlag","languageDriverId","MDXFieldFlag","getOffset","languageDriverName","nextAutoincrementValue","properties","_parseFieldProperties","records","record","field","recordIndex","getUInt8","numberOfFields","binaryString","parseInt","numericString","logical","toLowerCase","floatString","getDouble","numberOfStandardProperties","startOfStandardPropertiesDescriptor","numberOfCustomProperties","startOfCustomPropertiesDescriptor","numberOfReferentialIntegrityProperties","startOfReferentialIntegrityDescriptor","startOfData","sizeOfPropertiesStructure","standardProperties","standardIndex","_getStandardProperties","customProperties","customIndex","_getCustomProperties","referentialIntegrityProperties","referentialIntegrityIndex","_getReferentialIntegrityProperties","generationalNumber","tableFieldOffset","propertyDescribed","isConstraint","offsetFromStart","widthOfDatabaseField","offsetFromStartOfName","lengthOfName","offsetFromStartOfData","lengthOfData","databaseState","sequentialNumberRule","offsetOfTheRIRuleName","sizeOfTheRIRuleName","offsetOfNameOfForeignTable","sizeOfNameOfForeignTable","stateBehaviour","numberOfFieldsInLinkingKey","offsetOfLocalTableTagName","sizeOfTheLocalTableTagName","offsetOfForeignTableTagName","sizeOfTheForeignTableTagName","DbfToThree","TAbstractFileConverter","super","DumpType","ArrayBuffer","data","parameters","onSuccess","_convert","JsonToThree","JSON","ObjectLoader","MtlToThree","String","MTLLoader","Obj2ToThree","OBJLoader2","ShapeType","NullShape","Point","Polyline","Polygon","MultiPoint","PointZ","PolyLineZ","PolygonZ","MultiPointZ","PointM","PolylineM","PolygonM","MultiPointM","MultiPatch","ringClockwise","ring","n","i","area","ringContainsSome","hole","c","ringContains","point","x","y","contains","j","pi","xi","yi","pj","xj","yj","segmentContains","p0","p1","p2","x20","y20","x10","y10","t","SHPLoader","globalOffset","Vector3","worldAxis","from","to","_reader","FileCode","MinFileLength","MinVersion","fileCode","fileLength","shapeType","warn","_convertToObjects","xMinBoundingBox","yMinBoundingBox","boundingBox","xMin","xMax","yMin","yMax","zMin","zMax","mMin","mMax","skipOffsetTo","recordHeader","endOfRecord","recordContent","isEndOfFile","_parseRecordHeader","contentLength","_parsePoint","_parsePolyLine","_parseMultiPoint","_parseMultiPatch","recordNumber","getFloat64","numberOfParts","numberOfPoints","parts","Array","indexParts","points","indexPoint","polygons","holes","forEach","value","index","slice","some","polygon","shapes","numberOfShapes","isArray","__createObjectsFromArrays","__createObjectFromPoints","arrays","arrayIndex","numberOfArray","array","log","Shape","ShpToThree","ThreeToMongoDB","TAbstractDataInserter","Mongoose","self","parentId","dataToParse","disableRootNode","children","errors","numberOfRootChildren","processedRootChildren","rootChildIndex","checkNextRootChild","rootChild","_parse","childrenIds","done","todo","isNotDefined","checkEndOfParsing","Objects3DModelBase","_driver","model","findOneAndUpdate","_id","$push","rootObject","rootId","id","numberOfChildren","endUpdates","childIndex","childId","findByIdAndUpdate","$set","parent","success","object","checkNextChild","child","objectId","_saveInDataBase","jsonUserData","userData","prop","hasOwnProperty","replace","childrenArrayIds","filter","item","objectType","geometry","materials","material","_saveCurveInDatabase","isGeometry","vertices","console","materialOnError","materialType","materialIndex","numberOfMaterials","_saveGeometryInDatabase","geometryId","_saveMaterialInDatabase","materialIds","_saveObject3DInDatabase","isBufferGeometry","attributes","count","_saveBufferGeometryInDatabase","materialsIds","_checkIfObject3DAlreadyExist","_getObject3DModel","save","then","savedObject","savedChildrenIds","_doc","returnResult","updateChildren","catch","curve","curveId","_checkIfCurveAlreadyExist","_getCurveModel","savedCurve","_checkIfGeometryAlreadyExist","_getGeometryModel","savedGeometry","bufferGeometry","bufferGeometryId","_checkIfBufferGeometryAlreadyExist","_getBufferGeometryModel","savedBufferGeometry","texturesIds","numberOfSavedMaterials","materialId","_checkIfMaterialAlreadyExist","materialLocalIndex","_getMaterialModel","savedMaterial","texture","textureId","_checkIfTextureAlreadyExist","_getTextureModel","savedTexture","ColorType","Color","SchemaType","key","options","CastError","isNotObject","isColor","isNotNumber","r","g","b","COLOR_BSON_TYPE","BSON_DATA_OBJECT","Schema","Types","TMongoDBPlugin","addType","addController","TMongooseController","addDescriptor","route","controller","schemaName","can","create","on","over","read","update","delete","TAbstractConverterManager","useNext","converters","ObjToThree","rules","use","inserter","processFiles"],"mappings":"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"}